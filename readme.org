* Tagged Files for rails 3.2

** Installation
#+BEGIN_SRC shell
rvm use 1.9.3
rvm gemset create rails32
rvm use 1.9.3@rails32
gem install rails
#+END_SRC
** Steps

*** Basic Hello World
#+NAME: create a new rails app
#+BEGIN_SRC shell
rails new tagged_files
#+END_SRC

#+NAME: Gemfile - add haml and act_as_taggable_on
#+BEGIN_SRC ruby
gem 'haml-rails'
gem 'acts-as-taggable-on'
#+END_SRC

#+NAME: get gems prepare database and create controller scaffold
#+BEGIN_SRC ruby
bundle install
rails generate acts_as_taggable_on:migration
rails generate scaffold TaggedFile sha1:text size:integer original_filename:text
adapt
rake db:migrate
rails s
#+END_SRC

check it out

*** Add file upload
For the fileupload, the scaffolded form needs to be adapted.
only a file upload box and a comment textfield is needed, the rest (sha1, size, original-filename) can
be calculated in the receiving controller from the upload-object.

#+NAME: change the _form
#+BEGIN_SRC haml
  .field
    = f.label :comment
    = f.text_field :comment
  .field
    = f.label :binary_data
    = f.file_field :binary_data
#+END_SRC

#+NAME: change the create function of the tagged_file_controller
#+BEGIN_SRC ruby
    data = params[:tagged_file]
    uploaded_file = data.delete(:binary_data)
    binary_data = uploaded_file.read
    data[:sha1] = Digest::SHA1.hexdigest(binary_data)
    data[:size] = binary_data.size
    data[:original_filename] = uploaded_file.original_filename

    @tagged_file = TaggedFile.new(data)

    respond_to do |format|
      if @tagged_file.save_and_store_file(binary_data)
#+END_SRC

#+NAME: add save_and_store_file to tagged_file model (validations and file safe)
#+BEGIN_SRC ruby
  validates :sha1, :presence => true
  validates :size, :numericality => { :only_integer => true, :greater_than => 0 }
  validates :original_filename, :presence => true
  validates :comment, :presence => true

  def save_and_store_file(data)
    return false unless save

    begin
      File.open("store/#{sha1}", "wb") do |io|
        io.write(data)
        return true
      end
    rescue
      destroy
      self.errors[:base] = "Could not write file on server, please contact system administrator"
      return false
    end
  end
#+END_SRC

*** Add tagging
for tagging acts as taggable is used which provides the needed database tables and helper functions
#+NAME: add acts_as_taggable to the model
#+BEGIN_SRC ruby
  acts_as_taggable
#+END_SRC

#+NAME: we scaffold for tag
#+BEGIN_SRC bash
rails generate scaffold TaggedFile sha1:text size:integer original_filename:text
and remove the new migration (because the table is already there)
#+END_SRC

add the tags to the view of a tagged_file, the tagged_file_index and add a tagged_files list to the details-view of a tag
#+NAME: add helper function to tagged_files_helper.rb
#+BEGIN_SRC ruby
  def tag_links(tagged_file)
    tagged_file.tags.map {|tag| link_to(tag.name, Tag.find_by_name(tag.name))}.join(', ')
  end
#+END_SRC

#+NAME: add file infos (including tags) to index
#+BEGIN_SRC haml
    %th Sha1
    %th Size
    %th Original filename
    %th Comment
    %th Tags
...
      %td= tagged_file.sha1
      %td= tagged_file.size
      %td= tagged_file.original_filename
      %td= tagged_file.comment
      %td!= tag_links(tagged_file)
#+END_SRC

#+NAME: add route to routes.rb
#+BEGIN_SRC ruby
resources :tags
#+END_SRC

*** Add tagsearch
#+NAME: we use the index action in the tagged_files controller add to def index
#+BEGIN_SRC shell
    query = param[:query]
    if query.blank?
      @tagged_files = TaggedFile.all
    else
      @tagged_files = TaggedFile.find_for_query(query)
    end
#+END_SRC

#+NAME: add form to index-view
#+BEGIN_SRC haml
%br
= form_tag(tagged_files_path, :method => :get) do |f|
  .field
    = label_tag :query
    = text_field_tag :query
  .actions
    = submit_tag :search
#+END_SRC

#+NAME: add code to index controller
#+BEGIN_SRC ruby
    query = params[:query]
    if query.blank?
      @tagged_files = TaggedFile.all
    else
      @tagged_files = TaggedFile.find_for_query(query)
    end
#+END_SRC

#+NAME: add helper to model
#+BEGIN_SRC ruby
  def self.find_for_query(query)
    res = TaggedFile.where('original_filename LIKE ?', query)
    res = Tag.where('name LIKE ?', query).inject(res) do |res, tag|
      res | TaggedFile.tagged_with(tag.name)
    end
    return res
  end
#+END_SRC

